@page "/cptlist"
@inject ICPTManager cptManager
@inject IJSRuntime JSRuntime
@namespace PaychexDataConsolidationTool
<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

<link href="/css/FetchPageStyleSheet.css" rel="stylesheet">

<br />

<div class="form-group row">
    <div class="col-xs-2">
        <label for="StartDate"> Start Date: </label>
        <input type="date" id="StartDate" placeholder="Start Date" @bind="StartDate">
    </div>
    <div class="col-xs-2">
        <label for="EndDate" class="padded-left"> End Date: </label>
        <input type="date" id="EndDate" class="padded-right" placeholder="End Date" @bind="EndDate">
    </div>
    <div class="d-flex flex-column">
        <button type="button" class="btn btn-primary btn-block p-1" @onclick="generateCPTGraph"><i class="fa fa-search"></i>Search</button>
    </div>
</div>

<canvas id="lineGraph"></canvas>

@if (hasSearched == true && CPTtablelogic != null)
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th class="sort-th" @onclick="@(() => SortTable("DateOfReport"))">
                    Date Of Report
                    <span class="fa @(CPTtablelogic.SetSortIcon("DateOfReport"))"></span>
                </th>
                <th class="sort-th" @onclick="@(() => SortTable("ClientTypeName"))">
                    Type
                    <span class="fa @(CPTtablelogic.SetSortIcon("ClientTypeName"))"></span>
                </th>
                <th class="sort-th" @onclick="@(() => SortTable("TypeCountAsOfDate"))">
                    Total
                    <span class="fa @(CPTtablelogic.SetSortIcon("TypeCountAsOfDate"))"></span>
                </th>
            </tr>
        </thead>
        <tbody>
            @if (cpttModel == null || cpttModel.Count == 0)
            {
                <tr>
                    <td colspan="3">
                        No Records to display
                    </td>
                </tr>
            }
            else
            {
                foreach (var cptt in cpttModel)
                {
                    <tr>
                        <td>@cptt.DateOfReport</td>
                        <td>@cptt.ClientTypeName</td>
                        <td>@cptt.TypeCountAsOfDate</td>
                    </tr>
                }
            }

        </tbody>
    </table>
    <div class="pagination">
        <button class="btn btn-custom" @onclick=@(async () => await NavigateToPage("previous"))>Prev</button>

        @for (int i = CPTtablelogic.startPage; i <= CPTtablelogic.endPage; i++)
        {
            var currentPage = i;
            <button class="btn btn-custom pagebutton @(currentPage == CPTtablelogic.curPage ? "btn-danger" : "")" @onclick=@(async () => await refreshRecords(currentPage))>
                @currentPage
            </button>
        }

        <button class="btn btn-custom" @onclick=@(async () => await NavigateToPage("next"))>Next</button>

    </div>
}


@code {

    ////////////////////////////////////////////////////////////////////
    //
    // Values that we have bound to input elements of this razor file
    //
    private DateTime startDate = DateTime.Now;
    private DateTime StartDate
    {
        get { return startDate; }
        set { startDate = value; }
    }

    protected DateTime endDate = DateTime.Now;
    protected DateTime EndDate
    {
        get { return endDate; }
        set { endDate = value; }
    }


    ////////////////////////////////////////////////////////////////////
    //
    // Values that we will use to configure our table after search
    //

    List<CPTType> cpttModel;
    CPT cptEntity = new CPT();


    #region Pagination
    string sortColumnName = "DateOfReport";
    string sortDir = "ASC";
    TableLogic CPTtablelogic;
    #endregion

    public bool hasSearched = false;

    /////////////////////////////////////////////////////////////
    //
    // Declaring some things that will always exist in our graph
    //
    string[] dates = new string[0];
    string[] types = new string[0];
    string json;

    /////////////////////////////////////////////////////////////
    //
    // Waits for search to return, then sends flattened (serialized)
    // data over to our interop.js file
    //
    protected async Task generateCPTGraph()
    {
        await this.OnSearchAsync();

        await JSRuntime.InvokeAsync<bool>("generateLineGraph", json);

        await this.generateTable();
    }

    /////////////////////////////////////////////////////////////
    //
    // Main function that handles search between dates
    //
    protected async Task OnSearchAsync()
    {
        //Ensuring that we clean up if user decides to search again
        Array.Resize(ref dates, 0);
        Array.Resize(ref types, 0);

        //Getting our range of dates, and properly putting them in the array
        List<CPT> dateRange = await cptManager.getDates(startDate.ToString(), endDate.ToString());
        foreach (var date in dateRange)
        {
            Array.Resize(ref dates, dates.Length + 1);
            dates[dates.GetUpperBound(0)] = date.DateOfReport;
        }

        //Getting our types and properly putting them in the array
        List<PaychexDataConsolidationTool.Entities.ClientType> Types = await cptManager.getTypes();
        foreach (var type in Types)
        {
            Array.Resize(ref types, types.Length + 1);
            types[types.GetUpperBound(0)] = type.ClientTypeName.ToString();
            Console.WriteLine(type.ClientTypeName.ToString());
        }

        //Create our graphdata object because now we know what amount of data we are working with
        GraphData obj = new GraphData("Clients Per Type", dates, types, types.Length, dates.Length);

        /////////////////////////////////////////////////////////////
        //
        // For each type, get all the calculated totals between the
        // given dates, then store them in an array, that we will
        // place in another array (array of arrays/2d array) so that
        // each index in the types array corresponds to the index
        // of the 2d array that holds the totals i.e:
        //
        //  types[0] => CountsPerType[0]
        //
        int overflow = 0;
        for (int i = 0; i < types.Length; i++)
        {
            List<CPTType> allCountsPerTypeWithinDate = await cptManager.getTypeReportData(startDate.ToString(), endDate.ToString(), types[i]);
            int[] CountsPerType = new int[dates.Length];
            for (int j = 0; j < dates.Length; j++)
            {
                if (allCountsPerTypeWithinDate.Count == 0)
                {
                    CountsPerType[j] = 0;
                }
                else
                {
                    if (dates[j] == allCountsPerTypeWithinDate.ElementAt(overflow).DateOfReport)
                    {
                        CountsPerType[j] = allCountsPerTypeWithinDate.ElementAt(overflow).TypeCountAsOfDate;
                        overflow++;
                    }
                    else
                    {
                        CountsPerType[j] = 0;
                    }
                }
                obj.EntityCounts[i, j] = CountsPerType[j];
            }
            overflow = 0;
        }
        //Flattening our graphdata object to send over for JS to handle
        json = Newtonsoft.Json.JsonConvert.SerializeObject(obj);
        hasSearched = true;
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Function that generates table and initializes page values
    //
    protected async Task generateTable()
    {
        int pagerSize = 3;
        int pageSize = types.Length;
        int curPage = 1;
        cpttModel = await cptManager.ListAll((curPage - 1) * pageSize, pageSize, sortColumnName, startDate.ToString(), endDate.ToString(), sortDir);
        int totalRecords = await cptManager.Count(startDate.ToString(), endDate.ToString());
        int totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        int startPage = 1;
        CPTtablelogic = new TableLogic(totalPages, totalRecords, curPage, pagerSize, pageSize, startPage, sortColumnName, sortDir);
        CPTtablelogic.SetPagerSize("forward");
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Functions that sort records based on what a user selects
    //
    private async Task<List<CPTType>> SortRecords(string columnName, string dir)
    {
        return await cptManager.ListAll((CPTtablelogic.curPage - 1) * CPTtablelogic.pageSize, CPTtablelogic.pageSize, columnName, startDate.ToString(), endDate.ToString(), dir);
    }

    private async Task SortTable(string columnName)
    {
        if (columnName != CPTtablelogic.activeSortColumn)
        {
            cpttModel = await SortRecords(columnName, "ASC");
            CPTtablelogic.isSortedAscending = true;
            CPTtablelogic.activeSortColumn = columnName;
        }
        else
        {
            if (CPTtablelogic.isSortedAscending)
            {
                cpttModel = await SortRecords(columnName, "DESC");
            }
            else
            {
                cpttModel = await SortRecords(columnName, "ASC");
            }

            CPTtablelogic.isSortedAscending = !CPTtablelogic.isSortedAscending;
        }
        CPTtablelogic.sortColumnName = columnName;
        CPTtablelogic.sortDir = CPTtablelogic.isSortedAscending ? "ASC" : "DESC";
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Values will refresh when a user navigates to the next pageCPStablelogic.
    //
    public async Task refreshRecords(int currentPage)
    {
        cpttModel = await cptManager.ListAll((currentPage - 1) * CPTtablelogic.pageSize, CPTtablelogic.pageSize, CPTtablelogic.sortColumnName, startDate.ToString(), endDate.ToString(), CPTtablelogic.sortDir);
        CPTtablelogic.curPage = currentPage;
    }

    ////////////////////////////////////////////////////////////////////
    //
    // This actually navigates to the next page
    //
    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (CPTtablelogic.curPage < CPTtablelogic.totalPages)
            {
                if (CPTtablelogic.curPage == CPTtablelogic.endPage)
                {
                    CPTtablelogic.SetPagerSize("forward");
                }
                CPTtablelogic.curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (CPTtablelogic.curPage > 1)
            {
                if (CPTtablelogic.curPage == CPTtablelogic.startPage)
                {
                    CPTtablelogic.SetPagerSize("back");
                }
                CPTtablelogic.curPage -= 1;
            }
        }
        await refreshRecords(CPTtablelogic.curPage);
    }

}
