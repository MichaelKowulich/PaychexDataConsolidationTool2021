@page "/cpslist"
@inject ICPSManager cpsManager
@inject IJSRuntime JSRuntime
@namespace PaychexDataConsolidationTool
<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }

    .padded-left {
        margin-left: 20px;
    }

    .padded-right {
        margin-right: 20px;
    }

    .btn-custom {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        border: 2px solid #000;
        margin: 0px 5px 0px 5px;
    }
</style>

<br />

<div class="form-group row">
    <div class="col-xs-2">
        <label for="StartDate"> Start Date: </label>
        <input type="date" id="StartDate" placeholder="Start Date" @bind="StartDate">
    </div>
    <div class="col-xs-2">
        <label for="EndDate" class="padded-left"> End Date: </label>
        <input type="date" id="EndDate" class="padded-right" placeholder="End Date" @bind="EndDate">
    </div>
    <div class="d-flex flex-column">
        <button type="button" class="btn btn-primary btn-block p-1" @onclick="generateCPSGraph"><i class="fa fa-search"></i>Search</button>
    </div>
</div>

<canvas id="lineGraph"></canvas>

@if (hasSearched == true)
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th class="sort-th" @onclick="@(() => SortTable("DateOfReport"))">
                    Date Of Report
                    <span class="fa @(SetSortIcon("DateOfReport"))"></span>
                </th>
                <th class="sort-th" @onclick="@(() => SortTable("StatusName"))">
                    Status
                    <span class="fa @(SetSortIcon("StatusName"))"></span>
                </th>
                <th class="sort-th" @onclick="@(() => SortTable("StatusCountAsOfDate"))">
                    Total
                    <span class="fa @(SetSortIcon("StatusCountAsOfDate"))"></span>
                </th>
            </tr>
        </thead>
        <tbody>
            @if (cpssModel == null || cpssModel.Count == 0)
            {
                <tr>
                    <td colspan="3">
                        No Records to display
                    </td>
                </tr>
            }
            else
            {
                foreach (var cpss in cpssModel)
                {
                    <tr>
                        <td>@cpss.DateOfReport</td>
                        <td>@cpss.StatusName</td>
                        <td>@cpss.StatusCountAsOfDate</td>
                    </tr>
                }
            }

        </tbody>
    </table>
    <div class="pagination">
        <button class="btn btn-custom" @onclick=@(async () => await NavigateToPage("previous"))>Prev</button>

        @for (int i = startPage; i <= endPage; i++)
        {
            var currentPage = i;
            <button class="btn btn-custom pagebutton @(currentPage == curPage ? "btn-danger" : "")" @onclick=@(async () => await refreshRecords(currentPage))>
                @currentPage
            </button>
        }

        <button class="btn btn-custom" @onclick=@(async () => await NavigateToPage("next"))>Next</button>

    </div>
}


@code {

    /////////////////////////////////////////////////////////////
    //
    // Creating a GraphData Object so we can flatten (serialize) it
    // and send it over to javascript interop.js
    //
    public class GraphData
    {
        public int[,] StatusCounts { get; set; }
        public string[] Dates { get; set; }
        public string[] Statuses { get; set; }
        public GraphData(string[] theDates, string[] theStatuses, int i, int j)
        {
            this.Statuses = theStatuses;
            this.StatusCounts = new int[i, j];
            this.Dates = theDates;
        }
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Values that we have bound to input elements of this razor file
    //
    private DateTime startDate = DateTime.Now;
    private DateTime StartDate
    {
        get { return startDate; }
        set { startDate = value; }
    }

    protected DateTime endDate = DateTime.Now;
    protected DateTime EndDate
    {
        get { return endDate; }
        set { endDate = value; }
    }


    ////////////////////////////////////////////////////////////////////
    //
    // Values that we will use to configure our table after search
    //

    List<CPSStatus> cpssModel;
    CPS cpsEntity = new CPS();


    #region Pagination

    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;
    string sortColumnName = "ClientsPerStatusId";
    string sortDir = "DESC";

    #endregion

    private bool isSortedAscending;
    public bool hasSearched = false;
    private string activeSortColumn;

    /////////////////////////////////////////////////////////////
    //
    // Declaring some things that will always exist in our graph
    //
    string[] dates = new string[0];
    string[] statuses = new string[0];
    string json;

    /////////////////////////////////////////////////////////////
    //
    // Waits for search to return, then sends flattened (serialized)
    // data over to our interop.js file
    //
    protected async Task generateCPSGraph()
    {
        await this.OnSearchAsync();

        await JSRuntime.InvokeAsync<bool>("generateCPSGraph", json);

        await this.generateTable();
    }

    /////////////////////////////////////////////////////////////
    //
    // Main function that handles search between dates
    //
    protected async Task OnSearchAsync()
    {
        //Ensuring that we clean up if user decides to search again
        Array.Resize(ref dates, 0);
        Array.Resize(ref statuses, 0);

        //Getting our range of dates, and properly putting them in the array
        List<CPS> dateRange = await cpsManager.getDates(startDate.ToString(), endDate.ToString());
        foreach (var date in dateRange)
        {
            Array.Resize(ref dates, dates.Length + 1);
            dates[dates.GetUpperBound(0)] = date.DateOfReport;
        }

        //Getting our statuses and properly putting them in the array
        List<Status> Statuses = await cpsManager.getStatuses();
        foreach (var status in Statuses)
        {
            Array.Resize(ref statuses, statuses.Length + 1);
            statuses[statuses.GetUpperBound(0)] = status.StatusName.ToString();
        }

        //Create our graphdata object because now we know what amount of data we are working with
        GraphData obj = new GraphData(dates, statuses, statuses.Length, dates.Length);

        /////////////////////////////////////////////////////////////
        //
        // For each status, get all the calculated totals between the
        // given dates, then store them in an array, that we will
        // place in another array (array of arrays/2d array) so that
        // each index in the statuses array corresponds to the index
        // of the 2d array that holds the totals i.e:
        //
        //  statuses[0] => CountsPerStatus[0]
        //
        for (int i = 0; i < statuses.Length; i++)
        {
            List<CPSStatus> allCountsPerStatusWithinDate = await cpsManager.getStatusReportData(startDate.ToString(), endDate.ToString(), statuses[i]);
            int[] CountsPerStatus = new int[dates.Length];
            for (int j = 0; j < dates.Length; j++)
            {
                if (dates[j] == allCountsPerStatusWithinDate.ElementAt(j).DateOfReport)
                {
                    CountsPerStatus[j] = allCountsPerStatusWithinDate.ElementAt(j).StatusCountAsOfDate;
                }
                else
                {
                    CountsPerStatus[j] = 0;
                }
                obj.StatusCounts[i, j] = CountsPerStatus[j];
            }
        }
        //Flattening our graphdata object to send over for JS to handle
        json = Newtonsoft.Json.JsonConvert.SerializeObject(obj);
        hasSearched = true;
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Function that generates table and initializes page values
    //
    protected async Task generateTable()
    {
        pagerSize = 3;
        pageSize = statuses.Length;
        curPage = 1;
        cpssModel = await cpsManager.ListAll((curPage - 1) * pageSize, pageSize, sortColumnName, startDate.ToString(), endDate.ToString(), sortDir);
        totalRecords = await cpsManager.Count(startDate.ToString(), endDate.ToString());
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        SetPagerSize("forward");
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Functions that sort records based on what a user selects
    //
    private async Task<List<CPSStatus>> SortRecords(string columnName, string dir)
    {
        return await cpsManager.ListAll((curPage - 1) * pageSize, pageSize, columnName, startDate.ToString(), endDate.ToString(), dir);
    }

    private async Task SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            cpssModel = await SortRecords(columnName, "ASC");
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                cpssModel = await SortRecords(columnName, "DESC");
            }
            else
            {
                cpssModel = await SortRecords(columnName, "ASC");
            }

            isSortedAscending = !isSortedAscending;
        }
        sortColumnName = columnName;
        sortDir = isSortedAscending ? "ASC" : "DESC";
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Setting the icon to be either ^ v because we deserve nice things
    //
    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Values will refresh when a user navigates to the next page
    //
    public async Task refreshRecords(int currentPage)
    {
        cpssModel = await cpsManager.ListAll((currentPage - 1) * pageSize, pageSize, sortColumnName, startDate.ToString(), endDate.ToString(), sortDir);
        curPage = currentPage;
        this.StateHasChanged();
    }

    //////////////////////////////////////////////////////////////////////////
    //
    // This controls the forward and backward motion of tabular page turning
    //
    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        else
        {
            startPage = 1;
            endPage = totalPages;
        }
    }

    ////////////////////////////////////////////////////////////////////
    //
    // This actually navigates to the next page
    //
    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await refreshRecords(curPage);
    }

}
