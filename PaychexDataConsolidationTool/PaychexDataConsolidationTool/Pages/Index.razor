@page "/"
@inject ICPSManager cpsManager
@inject ICPTManager cptManager
@inject IUPTManager uptManager
@inject ICPBManager cpbManager
@inject IJSRuntime JSRuntime
@namespace PaychexDataConsolidationTool
<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<style>
    .btn-custom {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        border: 2px solid #000;
        margin: 0px 5px 0px 5px;
    }

    .float-container {
        padding: 10px;
        width: 100%;
        box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
        display: inline-block;
    }

    .float-child {
        width: 50%;
        float: left;
        background: white;
        padding: 5px;
    }

    .wrapper {
        height: 400px !important;
    }
</style>
<h1> Paychex Data Consolidation Tool</h1>
@foreach (var entity in Entities)
{
    <div class="float-container">
        <h2 class="headers">
            @entity Overview (@switch (entity)
            {
                case "Clients Per Status":
                    @mostRecentCPSDate
                    break;
                case "Clients Per Type":
                    @mostRecentCPTDate
                    break;
                case "Users Per Type":
                    @mostRecentUPTDate
                    break;
                case "Clients Per Brand":
                    @mostRecentCPBDate
                    break;
            }):
        </h2>
        <div class="float-child">
            <div class="wrapper">
                <canvas width="300" height="150" id="@entity"></canvas>
            </div>
        </div>
        <div class="float-child">
            <table class="table table-bordered table-hover">
                <thead>
                    @entity
                    <tr>
                        @if (entity == "Clients Per Type" || entity == "Users Per Type")
                        {
                            <th class="sort-th">
                                Type
                                <span class="fa "></span>
                            </th>
                        }
                        else if (entity == "Clients Per Status")
                        {
                            <th class="sort-th">
                                Status
                                <span class="fa "></span>
                            </th>
                        }
                        else if (entity == "Clients Per Brand")
                        {
                            <th class="sort-th">
                                Brand
                                <span class="fa "></span>
                            </th>
                            foreach (var countType in MostRecentCountTypes)
                            {
                            <th class="sort-th">
                                @countType.ClientsPerBrandCountTypeName
                                <span class="fa "></span>
                            </th>
                            }
                        }
                        @if (entity != "Clients Per Brand") {
                            <th class="sort-th">
                                Total
                                <span class="fa "></span>
                            </th>
                        }

                    </tr>
                </thead>
                <tbody>
                    @if (entity == "Clients Per Status")
                    {
                        foreach (var cpss in MostRecentCPSData)
                        {
                            <tr>
                                <td> @cpss.StatusName</td>
                                <td> @cpss.StatusCountAsOfDate</td>
                            </tr>
                        }
                    }
                    else if (entity == "Clients Per Type")
                    {
                        foreach (var cptt in MostRecentCPTData)
                        {
                            <tr>
                                <td> @cptt.ClientTypeName</td>
                                <td> @cptt.TypeCountAsOfDate</td>
                            </tr>
                        }
                    }
                    else if (entity == "Users Per Type")
                    {
                        foreach (var uptt in MostRecentUPTData)
                        {
                            <tr>
                                <td> @uptt.UserTypeName</td>
                                <td> @uptt.UserTypeCountAsOfDate</td>
                            </tr>
                        }
                    }
                    else if (entity == "Clients Per Brand")
                    {
                        for (int i = 0; i < MostRecentCPBData.Count / MostRecentCountTypes.Count; i++)
                        {
                            <tr>
                                <td> @MostRecentCPBData.ElementAt(i).ClientBrandName </td>
                                @for (int j = 0; j < MostRecentCountTypes.Count; j++)
                                {
                                    <td>@brandData[j][i]</td>
                                }
                            </tr>
                        }
                        <tr>
                            <td> <b> TOTAL </b> </td>
                            @for (int i = 0; i < MostRecentCountTypes.Count; i++)
                            {
                                <td> @brandData[i].Sum()</td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <br />
    <br />
}

@code {
    string[] Entities = { "Clients Per Status", "Clients Per Type", "Users Per Type", "Clients Per Brand" };

    List<CPS> MostRecentCPSDate;
    string mostRecentCPSDate;
    List<CPSStatus> MostRecentCPSData;
    string[] statuses = new string[0];
    int[] statusData = new int[0];
    string StatusJson;

    List<CPT> MostRecentCPTDate;
    string mostRecentCPTDate;
    List<CPTType> MostRecentCPTData;
    string[] types = new string[0];
    int[] typeData = new int[0];
    string TypeJson;

    List<UPT> MostRecentUPTDate;
    string mostRecentUPTDate;
    List<UPTType> MostRecentUPTData;
    string[] users = new string[0];
    int[] userData = new int[0];
    string UserJson;

    List<CPB> MostRecentCPBDate;
    string mostRecentCPBDate;
    List<CPBCountTypeBrand> MostRecentCPBData;
    List<ClientBrand> MostRecentBrands;
    List<ClientsPerBrandCountType> MostRecentCountTypes;
    string[] brands = new string[0];
    string[] countTypes = new string[0];
    int[][] brandData;
    string BrandJson;

    protected override async Task OnInitializedAsync()
    {
        //Clients Per Status
        MostRecentCPSDate = await cpsManager.getMostRecentDate();
        mostRecentCPSDate = MostRecentCPSDate.ElementAt(0).DateOfReport;
        MostRecentCPSData = await cpsManager.getMostRecentStatusCounts(mostRecentCPSDate);

        //Clients Per Type
        MostRecentCPTDate = await cptManager.getMostRecentDate();
        mostRecentCPTDate = MostRecentCPTDate.ElementAt(0).DateOfReport;
        MostRecentCPTData = await cptManager.getMostRecentTypeCounts(mostRecentCPTDate);

        //Users Per Type
        MostRecentUPTDate = await uptManager.getMostRecentDate();
        mostRecentUPTDate = MostRecentUPTDate.ElementAt(0).DateOfReport;
        MostRecentUPTData = await uptManager.getMostRecentTypeCounts(mostRecentUPTDate);

        //Clients Per Brand
        MostRecentCPBDate = await cpbManager.getMostRecentDate();
        mostRecentCPBDate = MostRecentCPBDate.ElementAt(0).DateOfReport;
        MostRecentCountTypes = await cpbManager.getCountTypes();
        MostRecentBrands = await cpbManager.getBrands();
        MostRecentCPBData = await cpbManager.getMostRecentBrandCountsOfType(mostRecentCPBDate);

        generatePiGraphs();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<bool>("generatePieChart", StatusJson);
        await JSRuntime.InvokeAsync<bool>("generatePieChart", TypeJson);
        await JSRuntime.InvokeAsync<bool>("generatePieChart", UserJson);
        await JSRuntime.InvokeAsync<bool>("generateBrandPieChart", BrandJson);
    }

    public class GraphData
    {
        public string EntityName;
        public string[] AllEntityNames { get; set; }
        public int[] AllEntityCountsPerName { get; set; }

        public GraphData(string EntityName, string[] AllEntityNames, int[] AllEntityCountsPerName)
        {
            this.EntityName = EntityName;
            this.AllEntityNames = AllEntityNames;
            this.AllEntityCountsPerName = AllEntityCountsPerName;
        }
    }

    public class ClientsPerBrandGraphData
    {
        public string EntityName;
        public string[] AllCountTypes { get; set; }
        public string[] AllBrands { get; set; }
        public int[][] BrandData { get; set; }

        public ClientsPerBrandGraphData(string EntityName, string[] AllCountTypes, string[] AllBrands, int[][] BrandData)
        {
            this.EntityName = EntityName;
            this.AllCountTypes = AllCountTypes;
            this.AllBrands = AllBrands;
            this.BrandData = BrandData;
        }
    }

    protected void generatePiGraphs()
    {
        //Clients Per Status
        foreach (var cps in MostRecentCPSData)
        {
            Array.Resize(ref statuses, statuses.Length + 1);
            statuses[statuses.GetUpperBound(0)] = cps.StatusName.ToString();
            Array.Resize(ref statusData, statusData.Length + 1);
            statusData[statusData.GetUpperBound(0)] = cps.StatusCountAsOfDate;
        }
        GraphData ClientsPerStatusData = new GraphData("Clients Per Status", statuses, statusData);
        StatusJson = Newtonsoft.Json.JsonConvert.SerializeObject(ClientsPerStatusData);

        //Clients Per Type
        foreach (var cpt in MostRecentCPTData)
        {
            Array.Resize(ref types, types.Length + 1);
            types[types.GetUpperBound(0)] = cpt.ClientTypeName.ToString();
            Array.Resize(ref typeData, typeData.Length + 1);
            typeData[typeData.GetUpperBound(0)] = cpt.TypeCountAsOfDate;
        }
        GraphData ClientsPerTypeData = new GraphData("Clients Per Type", types, typeData);
        TypeJson = Newtonsoft.Json.JsonConvert.SerializeObject(ClientsPerTypeData);

        //Users Per Type
        foreach (var upt in MostRecentUPTData)
        {
            Array.Resize(ref users, users.Length + 1);
            users[users.GetUpperBound(0)] = upt.UserTypeName.ToString();
            Array.Resize(ref userData, userData.Length + 1);
            userData[userData.GetUpperBound(0)] = upt.UserTypeCountAsOfDate;
        }
        GraphData UsersPerTypeData = new GraphData("Users Per Type", users, userData);
        UserJson = Newtonsoft.Json.JsonConvert.SerializeObject(UsersPerTypeData);

        //Clients Per Brand
        foreach (var ct in MostRecentCountTypes)
        {
            Array.Resize(ref countTypes, countTypes.Length + 1);
            countTypes[countTypes.GetUpperBound(0)] = ct.ClientsPerBrandCountTypeName.ToString();
        }
        foreach (var brand in MostRecentBrands)
        {
            Array.Resize(ref brands, brands.Length + 1);
            brands[brands.GetUpperBound(0)] = brand.ClientBrandName.ToString();
        }
        brandData = new int[countTypes.Length][];
        int overflow = 0;
        for (int i = 0; i < countTypes.Length; i++)
        {
            brandData[i] = new int[brands.Length];
            for (int j = 0; j < brands.Length; j++)
            {
                brandData[i][j] = MostRecentCPBData.ElementAt(overflow).CountAsOfDate;
                overflow++;
            }
        }
        ClientsPerBrandGraphData ClientsPerBrandData = new ClientsPerBrandGraphData("Clients Per Brand", countTypes, brands, brandData);
        BrandJson = Newtonsoft.Json.JsonConvert.SerializeObject(ClientsPerBrandData);
    }
}