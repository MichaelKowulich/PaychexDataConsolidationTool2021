@page "/cpslist"
@inject ICPSManager cpsManager
@inject IJSRuntime JSRuntime
@namespace PaychexDataConsolidationTool
<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }

    .btn-custom {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        border: 2px solid #000;
        margin: 0px 5px 0px 5px;
    }
</style>

<br />

 <div class="form-group row">
        <div class="col-xs-2">
            <label for="StartDate"> Start Date: </label>
            <input type="text" id="StartDate" class="form-control" placeholder="Start Date" @bind="StartDate" @bind:event="oninput">
        </div>
        <div class="col-xs-2">
            <label for="EndDate"> End Date: </label>
            <input type="text" id="EndDate" class="form-control" placeholder="End Date" @bind="EndDate" @bind:event="oninput">
        </div>
        <div class="d-flex flex-column">
            <button type="button" class="btn btn-primary btn-block mt-auto p-3" @onclick="generateCPSGraph"><i class="fa fa-search" ></i></button>
        </div>
    </div>

    <canvas id="lineGraph"></canvas>


@code {

    public class GraphData
    {
        public int[,] StatusCounts { get; set; }
        public string[] Dates { get; set; }
        public string[] Statuses { get; set; }
        public GraphData(string[] theDates, string[] theStatuses, int i, int j)
        {
            this.Statuses = theStatuses;
            this.StatusCounts = new int[i,j];
            this.Dates = theDates;
        }
    }

    private string startDate;
    private string StartDate
    {
        get { return startDate; }
        set { startDate = value; }
    }

    private string endDate;
    private string EndDate
    {
        get { return endDate; }
        set { endDate = value; }
    }

    string[] dates = new string[0];
    string[] statuses = new string[0];
    string json;

    protected async Task generateCPSGraph()
    {
        await this.OnSearchAsync();

        await JSRuntime.InvokeAsync<bool>("generateCPSGraph", json);
    }

    protected async Task OnSearchAsync()
    {
        Array.Resize(ref dates, 0);
        Array.Resize(ref statuses, 0);
        List<CPS> dateRange = await cpsManager.getDates(startDate, endDate);
        foreach (var date in dateRange)
        {
            Array.Resize(ref dates, dates.Length + 1);
            dates[dates.GetUpperBound(0)] = date.DateOfReport;
        }

        List<Status> Statuses = await cpsManager.getStatuses();
        foreach (var status in Statuses)
        {
            Array.Resize(ref statuses, statuses.Length + 1);
            statuses[statuses.GetUpperBound(0)] = status.StatusName.ToString();
        }

        GraphData obj = new GraphData(dates, statuses, statuses.Length, dates.Length);
        for (int i = 0; i < statuses.Length; i++)
        {
            List<CPSStatus> allCountsPerStatusWithinDate = await cpsManager.getStatusReportData(startDate, endDate, statuses[i]);
            int[] CountsPerStatus = new int[dates.Length];
            for (int j = 0; j < dates.Length; j++)
            {
                if (dates[j] == allCountsPerStatusWithinDate.ElementAt(j).DateOfReport)
                {
                    CountsPerStatus[j] = allCountsPerStatusWithinDate.ElementAt(j).StatusCountAsOfDate;
                }
                else
                {
                    CountsPerStatus[j] = 0;
                }
                obj.StatusCounts[i,j] = CountsPerStatus[j];
            }
        }
        json = Newtonsoft.Json.JsonConvert.SerializeObject(obj);
    }
}
