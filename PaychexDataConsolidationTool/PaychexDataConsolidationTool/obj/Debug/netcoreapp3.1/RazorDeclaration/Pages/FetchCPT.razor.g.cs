#pragma checksum "D:\Team Project\PaychexDataConsolidationTool\PaychexDataConsolidationTool\Pages\FetchCPT.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "26ce4a7ab4fad0c1ba851449f168f480e8ca2b94"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace PaychexDataConsolidationTool
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Team Project\PaychexDataConsolidationTool\PaychexDataConsolidationTool\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Team Project\PaychexDataConsolidationTool\PaychexDataConsolidationTool\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Team Project\PaychexDataConsolidationTool\PaychexDataConsolidationTool\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Team Project\PaychexDataConsolidationTool\PaychexDataConsolidationTool\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Team Project\PaychexDataConsolidationTool\PaychexDataConsolidationTool\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Team Project\PaychexDataConsolidationTool\PaychexDataConsolidationTool\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Team Project\PaychexDataConsolidationTool\PaychexDataConsolidationTool\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Team Project\PaychexDataConsolidationTool\PaychexDataConsolidationTool\_Imports.razor"
using PaychexDataConsolidationTool;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Team Project\PaychexDataConsolidationTool\PaychexDataConsolidationTool\_Imports.razor"
using PaychexDataConsolidationTool.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Team Project\PaychexDataConsolidationTool\PaychexDataConsolidationTool\_Imports.razor"
using PaychexDataConsolidationTool.Concrete;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Team Project\PaychexDataConsolidationTool\PaychexDataConsolidationTool\_Imports.razor"
using PaychexDataConsolidationTool.Contracts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Team Project\PaychexDataConsolidationTool\PaychexDataConsolidationTool\_Imports.razor"
using PaychexDataConsolidationTool.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Team Project\PaychexDataConsolidationTool\PaychexDataConsolidationTool\_Imports.razor"
using PaychexDataConsolidationTool.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Team Project\PaychexDataConsolidationTool\PaychexDataConsolidationTool\_Imports.razor"
using PaychexDataConsolidationTool.DataAccess;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Team Project\PaychexDataConsolidationTool\PaychexDataConsolidationTool\_Imports.razor"
using ChartJs.Blazor;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/cptlist")]
    public partial class FetchCPT : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 112 "D:\Team Project\PaychexDataConsolidationTool\PaychexDataConsolidationTool\Pages\FetchCPT.razor"
       

    /////////////////////////////////////////////////////////////
    //
    // Creating a GraphData Object so we can flatten (serialize) it
    // and send it over to javascript interop.js
    //
    public class GraphData
    {
        public int[,] TypeCounts { get; set; }
        public string[] Dates { get; set; }
        public string[] Types { get; set; }
        public GraphData(string[] theDates, string[] theTypes, int i, int j)
        {
            this.Types = theTypes;
            this.TypeCounts = new int[i, j];
            this.Dates = theDates;
        }
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Values that we have bound to input elements of this razor file
    //
    private DateTime startDate = DateTime.Now;
    private DateTime StartDate
    {
        get { return startDate; }
        set { startDate = value; }
    }

    protected DateTime endDate = DateTime.Now;
    protected DateTime EndDate
    {
        get { return endDate; }
        set { endDate = value; }
    }


    ////////////////////////////////////////////////////////////////////
    //
    // Values that we will use to configure our table after search
    //

    List<CPTType> cpttModel;
    CPT cptEntity = new CPT();


    #region Pagination

    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;
    string sortColumnName = "DateOfReport";
    string sortDir = "ASC";

    #endregion

    private bool isSortedAscending;
    public bool hasSearched = false;
    private string activeSortColumn;

    /////////////////////////////////////////////////////////////
    //
    // Declaring some things that will always exist in our graph
    //
    string[] dates = new string[0];
    string[] types = new string[0];
    string json;

    /////////////////////////////////////////////////////////////
    //
    // Waits for search to return, then sends flattened (serialized)
    // data over to our interop.js file
    //
    protected async Task generateCPTGraph()
    {
        await this.OnSearchAsync();

        await JSRuntime.InvokeAsync<bool>("generateCPTGraph", json);

        await this.generateTable();
    }

    /////////////////////////////////////////////////////////////
    //
    // Main function that handles search between dates
    //
    protected async Task OnSearchAsync()
    {
        //Ensuring that we clean up if user decides to search again
        Array.Resize(ref dates, 0);
        Array.Resize(ref types, 0);

        //Getting our range of dates, and properly putting them in the array
        List<CPT> dateRange = await cptManager.getDates(startDate.ToString(), endDate.ToString());
        foreach (var date in dateRange)
        {
            Array.Resize(ref dates, dates.Length + 1);
            dates[dates.GetUpperBound(0)] = date.DateOfReport;
        }

        //Getting our types and properly putting them in the array
        List<PaychexDataConsolidationTool.Entities.Type> Types = await cptManager.getTypes();
        foreach (var type in Types)
        {
            Array.Resize(ref types, types.Length + 1);
            types[types.GetUpperBound(0)] = type.TypeName.ToString();
            Console.WriteLine(type.TypeName.ToString());
        }

        //Create our graphdata object because now we know what amount of data we are working with
        GraphData obj = new GraphData(dates, types, types.Length, dates.Length);

        /////////////////////////////////////////////////////////////
        //
        // For each type, get all the calculated totals between the
        // given dates, then store them in an array, that we will
        // place in another array (array of arrays/2d array) so that
        // each index in the types array corresponds to the index
        // of the 2d array that holds the totals i.e:
        //
        //  types[0] => CountsPerType[0]
        //
        for (int i = 0; i < types.Length; i++)
        {
            List<CPTType> allCountsPerTypeWithinDate = await cptManager.getTypeReportData(startDate.ToString(), endDate.ToString(), types[i]);
            int[] CountsPerType = new int[dates.Length];
            for (int j = 0; j < dates.Length; j++)
            {
                if (allCountsPerTypeWithinDate.Count == 0)
                {
                    CountsPerType[j] = 0;
                }
                else
                {
                    if (dates[j] == allCountsPerTypeWithinDate.ElementAt(j).DateOfReport)
                    {
                        CountsPerType[j] = allCountsPerTypeWithinDate.ElementAt(j).TypeCountAsOfDate;
                    }
                    else
                    {
                        CountsPerType[j] = 0;
                    }
                }
                obj.TypeCounts[i, j] = CountsPerType[j];
            }
        }
        //Flattening our graphdata object to send over for JS to handle
        json = Newtonsoft.Json.JsonConvert.SerializeObject(obj);
        hasSearched = true;
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Function that generates table and initializes page values
    //
    protected async Task generateTable()
    {
        pagerSize = 3;
        pageSize = types.Length;
        curPage = 1;
        cpttModel = await cptManager.ListAll((curPage - 1) * pageSize, pageSize, sortColumnName, startDate.ToString(), endDate.ToString(), sortDir);
        totalRecords = await cptManager.Count(startDate.ToString(), endDate.ToString());
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        SetPagerSize("forward");
        startPage = 1;
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Functions that sort records based on what a user selects
    //
    private async Task<List<CPTType>> SortRecords(string columnName, string dir)
    {
        return await cptManager.ListAll((curPage - 1) * pageSize, pageSize, columnName, startDate.ToString(), endDate.ToString(), dir);
    }

    private async Task SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            cpttModel = await SortRecords(columnName, "ASC");
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                cpttModel = await SortRecords(columnName, "DESC");
            }
            else
            {
                cpttModel = await SortRecords(columnName, "ASC");
            }

            isSortedAscending = !isSortedAscending;
        }
        sortColumnName = columnName;
        sortDir = isSortedAscending ? "ASC" : "DESC";
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Setting the icon to be either ^ v because we deserve nice things
    //
    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Values will refresh when a user navigates to the next page
    //
    public async Task refreshRecords(int currentPage)
    {
        cpttModel = await cptManager.ListAll((currentPage - 1) * pageSize, pageSize, sortColumnName, startDate.ToString(), endDate.ToString(), sortDir);
        curPage = currentPage;
        this.StateHasChanged();
    }

    //////////////////////////////////////////////////////////////////////////
    //
    // This controls the forward and backward motion of tabular page turning
    //
    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        else
        {
            startPage = 1;
            endPage = totalPages;
        }
    }

    ////////////////////////////////////////////////////////////////////
    //
    // This actually navigates to the next page
    //
    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await refreshRecords(curPage);
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICPTManager cptManager { get; set; }
    }
}
#pragma warning restore 1591
