@page "/cpslist"
@inject ICPSManager cpsManager
@inject IJSRuntime JSRuntime
@namespace PaychexDataConsolidationTool
<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }

    .padded-left {
        margin-left: 20px;
    }

    .padded-right {
        margin-right: 20px;
    }

    .btn-custom {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        border: 2px solid #000;
        margin: 0px 5px 0px 5px;
    }
</style>

<br />

 <div class="form-group row">
     <div class="col-xs-2">
         <label for="StartDate"> Start Date: </label>
         <input type="date" id="StartDate"  placeholder="Start Date" @bind="StartDate">
     </div>
        <div class="col-xs-2">
            <label for="EndDate" class="padded-left"> End Date: </label>
            <input type="date" id="EndDate" class="padded-right" placeholder="End Date" @bind="EndDate">
        </div>
        <div class="d-flex flex-column">
            <button type="button" class="btn btn-primary btn-block p-1" @onclick="generateCPSGraph"><i class="fa fa-search" ></i>Search</button>
        </div>
    </div>

    <canvas id="lineGraph"></canvas>


@code {

    /////////////////////////////////////////////////////////////
    //
    // Creating a GraphData Object so we can flatten (serialize) it
    // and send it over to javascript interop.js
    //
    public class GraphData
    {
        public int[,] StatusCounts { get; set; }
        public string[] Dates { get; set; }
        public string[] Statuses { get; set; }
        public GraphData(string[] theDates, string[] theStatuses, int i, int j)
        {
            this.Statuses = theStatuses;
            this.StatusCounts = new int[i,j];
            this.Dates = theDates;
        }
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Values that we have bound to input elements of this razor file
    //
    private DateTime startDate = DateTime.Now;
    private DateTime StartDate
    {
        get { return startDate; }
        set { startDate = value; }
    }

    protected DateTime endDate = DateTime.Now;
    protected DateTime EndDate
    {
        get { return endDate; }
        set { endDate = value; }
    }

    /////////////////////////////////////////////////////////////
    //
    // Declaring somethings that will always exist
    //
    string[] dates = new string[0];
    string[] statuses = new string[0];
    string json;

    /////////////////////////////////////////////////////////////
    //
    // Waits for search to return, then sends flattened (serialized)
    // data over to our interop.js file
    //
    protected async Task generateCPSGraph()
    {
        await this.OnSearchAsync();

        await JSRuntime.InvokeAsync<bool>("generateCPSGraph", json);
    }

    /////////////////////////////////////////////////////////////
    //
    // Main function that handles search between dates
    //
    protected async Task OnSearchAsync()
    {
        //Ensuring that we clean up if user decides to search again
        Array.Resize(ref dates, 0);
        Array.Resize(ref statuses, 0);

        //Getting our range of dates, and properly putting them in the array
        List<CPS> dateRange = await cpsManager.getDates(startDate.ToString(), endDate.ToString());
        foreach (var date in dateRange)
        {
            Array.Resize(ref dates, dates.Length + 1);
            dates[dates.GetUpperBound(0)] = date.DateOfReport;
        }

        //Getting our statuses and properly putting them in the array
        List<Status> Statuses = await cpsManager.getStatuses();
        foreach (var status in Statuses)
        {
            Array.Resize(ref statuses, statuses.Length + 1);
            statuses[statuses.GetUpperBound(0)] = status.StatusName.ToString();
        }

        //Create our graphdata object because now we know what amount of data we are working with
        GraphData obj = new GraphData(dates, statuses, statuses.Length, dates.Length);

        /////////////////////////////////////////////////////////////
        //
        // For each status, get all the calculated totals between the
        // given dates, then store them in an array, that we will
        // place in another array (array of arrays/2d array) so that
        // each index in the statuses array corresponds to the index
        // of the 2d array that holds the totals i.e:
        //
        //  statuses[0] => CountsPerStatus[0]
        //
        for (int i = 0; i < statuses.Length; i++)
        {
            List<CPSStatus> allCountsPerStatusWithinDate = await cpsManager.getStatusReportData(startDate.ToString(), endDate.ToString(), statuses[i]);
            int[] CountsPerStatus = new int[dates.Length];
            for (int j = 0; j < dates.Length; j++)
            {
                if (dates[j] == allCountsPerStatusWithinDate.ElementAt(j).DateOfReport)
                {
                    CountsPerStatus[j] = allCountsPerStatusWithinDate.ElementAt(j).StatusCountAsOfDate;
                }
                else
                {
                    CountsPerStatus[j] = 0;
                }
                obj.StatusCounts[i,j] = CountsPerStatus[j];
            }
        }
        //Flattening our graphdata object to send over for JS to handle
        json = Newtonsoft.Json.JsonConvert.SerializeObject(obj);
    }
}
