@page "/cpblist"
@inject ICPBManager cpbManager
@inject IJSRuntime JSRuntime
@namespace PaychexDataConsolidationTool
<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

<link href="/css/FetchPageStyleSheet.css" rel="stylesheet">

<br />

<div class="form-group row">
    <div class="col-xs-2">
        <label for="StartDate"> Start Date: </label>
        <input type="date" id="StartDate" placeholder="Start Date" @bind="StartDate">
    </div>
    <div class="col-xs-2">
        <label for="EndDate" class="padded-left"> End Date: </label>
        <input type="date" id="EndDate" class="padded-right" placeholder="End Date" @bind="EndDate">
    </div>
    <div class="col-xs-2">
        <label for="CountType" class="padded-left"> Count Type: </label>
        <select type="string" id="CountType" class="padded-right"  @bind="TempCountType">

        @foreach (ClientsPerBrandCountType type in countTypeNames)
        {
            <option value="@type.ClientsPerBrandCountTypeName" > @type.ClientsPerBrandCountTypeName </option>
        }

        </select>
    </div>
    <div class="d-flex flex-column">
        <button type="button" class="btn btn-primary btn-block p-1" @onclick="generateCPBGraph"><i class="fa fa-search"></i>Search</button>
    </div>
</div>

<canvas id="lineGraph"></canvas>

@if (hasSearched == true && CPBtablelogic != null)
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th class="sort-th" @onclick="@(() => SortTable("DateOfReport"))">
                    Date Of Report
                    <span class="fa @(CPBtablelogic.SetSortIcon("DateOfReport"))"></span>
                </th>
                <th class="sort-th" @onclick="@(() => SortTable("ClientBrandName"))">
                    Brand
                    <span class="fa @(CPBtablelogic.SetSortIcon("ClientBrandName"))"></span>
                </th>
                <th class="sort-th" @onclick="@(() => SortTable("CountAsOfDate"))">
                    @countType
                    <span class="fa @(CPBtablelogic.SetSortIcon("CountAsOfDate"))"></span>
                </th>
            </tr>
        </thead>
        <tbody>
            @if (cpbbModel == null || cpbbModel.Count == 0)
            {
                <tr>
                    <td colspan="3">
                        No Records to display
                    </td>
                </tr>
            }
            else
            {
                foreach (var cpbb in cpbbModel)
                {
                    <tr>
                        <td>@cpbb.DateOfReport</td>
                        <td>@cpbb.ClientBrandName</td>
                        <td>@cpbb.CountAsOfDate</td>
                    </tr>
                }
            }

        </tbody>
    </table>
    <div class="pagination">
        <button class="btn btn-custom" @onclick=@(async () => await NavigateToPage("previous"))>Prev</button>

        @for (int i = CPBtablelogic.startPage; i <= CPBtablelogic.endPage; i++)
        {
            var currentPage = i;
            <button class="btn btn-custom pagebutton @(currentPage == CPBtablelogic.curPage ? "btn-danger" : "")" @onclick=@(async () => await refreshRecords(currentPage))>
                @currentPage
            </button>
        }

        <button class="btn btn-custom" @onclick=@(async () => await NavigateToPage("next"))>Next</button>

    </div>
}


@code {

    ////////////////////////////////////////////////////////////////////
    //
    // Values that we have bound to input elements of this razor file
    //
    private DateTime startDate = DateTime.Now;
    private DateTime StartDate
    {
        get { return startDate; }
        set { startDate = value; }
    }

    protected DateTime endDate = DateTime.Now;
    protected DateTime EndDate
    {
        get { return endDate; }
        set { endDate = value; }
    }

    protected string countType = "Active Client Count";
    protected string CountType
    {
        get { return countType; }
        set { countType = value; }
    }

    protected string tempCountType = "Active Client Count";
    protected string TempCountType
    {
        get { return tempCountType; }
        set { tempCountType = value; }
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Values that we will use to configure our table after search
    //

    List<CPBCountTypeBrand> cpbbModel;
    CPB cpbEntity = new CPB();


    #region Pagination
    string sortColumnName = "DateOfReport";
    string sortDir = "ASC";
    TableLogic CPBtablelogic;
    #endregion

    public bool hasSearched = false;

    /////////////////////////////////////////////////////////////
    //
    // Declaring some things that will always exist in our graph
    //
    string[] dates = new string[0];
    string[] brands = new string[0];
    string json;

    private List<ClientsPerBrandCountType> countTypeNames;

    protected override async Task OnInitializedAsync()
    {
        countTypeNames = await cpbManager.getCountTypes();
    }

    /////////////////////////////////////////////////////////////
    //
    // Waits for search to return, then sends flattened (serialized)
    // data over to our interop.js file
    //
    protected async Task generateCPBGraph()
    {
        await this.OnSearchAsync();

        await JSRuntime.InvokeAsync<bool>("generateLineGraph", json);

        await this.generateTable();
    }

    /////////////////////////////////////////////////////////////
    //
    // Main function that handles search between dates
    //
    protected async Task OnSearchAsync()
    {

        countType = tempCountType;

        //Ensuring that we clean up if user decides to search again
        Array.Resize(ref dates, 0);
        Array.Resize(ref brands, 0);

        //Getting our range of dates, and properly putting them in the array
        List<CPB> dateRange = await cpbManager.getDates(startDate.ToString(), endDate.ToString());
        foreach (var date in dateRange)
        {
            Array.Resize(ref dates, dates.Length + 1);
            dates[dates.GetUpperBound(0)] = date.DateOfReport;
        }

        //Getting our types and properly putting them in the array
        List<PaychexDataConsolidationTool.Entities.ClientBrand> Brands = await cpbManager.getBrands();
        foreach (var brand in Brands)
        {
            Array.Resize(ref brands, brands.Length + 1);
            brands[brands.GetUpperBound(0)] = brand.ClientBrandName.ToString();
            Console.WriteLine(brand.ClientBrandName.ToString());
        }

        //Create our graphdata object because now we know what amount of data we are working with
        GraphData obj = new GraphData("Clients Per Brand", dates, brands, brands.Length, dates.Length);

        /////////////////////////////////////////////////////////////
        //
        // For each type, get all the calculated totals between the
        // given dates, then store them in an array, that we will
        // place in another array (array of arrays/2d array) so that
        // each index in the types array corresponds to the index
        // of the 2d array that holds the totals i.e:
        //
        //  types[0] => CountsPerType[0]
        //
        int overflow = 0;
        for (int i = 0; i < brands.Length; i++)
        {
            List<CPBCountTypeBrand> allCountsPerBrandWithinDate = await cpbManager.getBrandReportData(startDate.ToString(), endDate.ToString(), brands[i], countType);
            int[] CountsPerBrand = new int[dates.Length];
            for (int j = 0; j < dates.Length; j++)
            {
                if (allCountsPerBrandWithinDate.Count == 0)
                {
                    CountsPerBrand[j] = 0;
                }
                else
                {
                    if (dates[j] == allCountsPerBrandWithinDate.ElementAt(overflow).DateOfReport)
                    {
                        CountsPerBrand[j] = allCountsPerBrandWithinDate.ElementAt(overflow).CountAsOfDate;
                        overflow++;
                    }
                    else
                    {
                        CountsPerBrand[j] = 0;
                    }
                }
                obj.EntityCounts[i, j] = CountsPerBrand[j];
            }
            overflow = 0;
        }
        //Flattening our graphdata object to send over for JS to handle
        json = Newtonsoft.Json.JsonConvert.SerializeObject(obj);
        hasSearched = true;
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Function that generates table and initializes page values
    //
    protected async Task generateTable()
    {
        int pagerSize = 3;
        int pageSize = brands.Length;
        int curPage = 1;
        cpbbModel = await cpbManager.ListAll((curPage - 1) * pageSize, pageSize, sortColumnName, startDate.ToString(), endDate.ToString(), countType, sortDir);
        int totalRecords = await cpbManager.Count(startDate.ToString(), endDate.ToString());
        int totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize) / countTypeNames.Count;
        int startPage = 1;
        CPBtablelogic = new TableLogic(totalPages, totalRecords, curPage, pagerSize, pageSize, startPage, sortColumnName, sortDir);
        CPBtablelogic.SetPagerSize("forward");
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Functions that sort records based on what a user selects
    //
    private async Task<List<CPBCountTypeBrand>> SortRecords(string columnName, string dir)
    {
        return await cpbManager.ListAll((CPBtablelogic.curPage - 1) * CPBtablelogic.pageSize, CPBtablelogic.pageSize, columnName, startDate.ToString(), endDate.ToString(), countType, dir);
    }

    private async Task SortTable(string columnName)
    {
        if (columnName != CPBtablelogic.activeSortColumn)
        {
            cpbbModel = await SortRecords(columnName, "ASC");
            CPBtablelogic.isSortedAscending = true;
            CPBtablelogic.activeSortColumn = columnName;
        }
        else
        {
            if (CPBtablelogic.isSortedAscending)
            {
                cpbbModel = await SortRecords(columnName, "DESC");
            }
            else
            {
                cpbbModel = await SortRecords(columnName, "ASC");
            }

            CPBtablelogic.isSortedAscending = !CPBtablelogic.isSortedAscending;
        }
        CPBtablelogic.sortColumnName = columnName;
        CPBtablelogic.sortDir = CPBtablelogic.isSortedAscending ? "ASC" : "DESC";
    }

    ////////////////////////////////////////////////////////////////////
    //
    // Values will refresh when a user navigates to the next page
    //
    public async Task refreshRecords(int currentPage)
    {
        cpbbModel = await cpbManager.ListAll((currentPage - 1) * CPBtablelogic.pageSize, CPBtablelogic.pageSize, CPBtablelogic.sortColumnName, startDate.ToString(), endDate.ToString(), countType, CPBtablelogic.sortDir);
        CPBtablelogic.curPage = currentPage;
    }

    ////////////////////////////////////////////////////////////////////
    //
    // This actually navigates to the next page
    //
    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (CPBtablelogic.curPage < CPBtablelogic.totalPages)
            {
                if (CPBtablelogic.curPage == CPBtablelogic.endPage)
                {
                    CPBtablelogic.SetPagerSize("forward");
                }
                CPBtablelogic.curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (CPBtablelogic.curPage > 1)
            {
                if (CPBtablelogic.curPage == CPBtablelogic.startPage)
                {
                    CPBtablelogic.SetPagerSize("back");
                }
                CPBtablelogic.curPage -= 1;
            }
        }
        await refreshRecords(CPBtablelogic.curPage);
    }

}
