@page "/"
@inject ICPSManager cpsManager
@inject ICPTManager cptManager
@inject IUPTManager uptManager
@inject IJSRuntime JSRuntime
@namespace PaychexDataConsolidationTool
<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<style>
    .btn-custom {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        border: 2px solid #000;
        margin: 0px 5px 0px 5px;
    }

    .float-container {
        padding: 20px;
    }

    .float-child {
        width: 50%;
        float: left;
        background: white;
        display: inline-block;
        padding: 5px;
    }

    .wrapper {
        height: 400px !important;
    }

</style>
<h1> Paychex Data Consolidation Tool</h1>
<br />
<h2> Most Recent Report Date: @mostRecentCPSDate </h2>
<br />

@foreach (var entity in Entities)
{
<div class="float-container">
    <h2 class="headers"> @entity Overview: </h2>
    <div class="float-child">
        <div class="wrapper">
            <canvas width="300" height="150" id="@entity"></canvas>
        </div>
    </div>
    <div class="float-child">
        <table class="table table-bordered table-hover">
            <thead>
                @entity
                <tr>
                    @if (entity == "Clients Per Type" || entity == "Users Per Type")
                    {
                        <th class="sort-th">
                            Type
                            <span class="fa "></span>
                        </th>
                    }
                    else if (entity == "Clients Per Status")
                    {
                        <th class="sort-th">
                            Status
                            <span class="fa "></span>
                        </th>
                    }
                    <th class="sort-th">
                        Total
                        <span class="fa "></span>
                    </th>
                </tr>
                @if (entity == "Clients Per Status")
                {
                    foreach (var cpss in MostRecentCPSData)
                    {
                        <tr>
                            <td> @cpss.StatusName</td>
                            <td> @cpss.StatusCountAsOfDate</td>
                        </tr>
                    }
                }
                else if (entity == "Clients Per Type")
                {
                    foreach (var cptt in MostRecentCPTData)
                    {
                        <tr>
                            <td> @cptt.TypeName</td>
                            <td> @cptt.TypeCountAsOfDate</td>
                        </tr>
                    }
                }
                else if (entity == "Users Per Type")
                {
                    foreach (var uptt in MostRecentUPTData)
                    {
                        <tr>
                            <td> @uptt.UserTypeName</td>
                            <td> @uptt.UserTypeCountAsOfDate</td>
                        </tr>
                    }
                }
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>
}

@code {
    string[] Entities = { "Clients Per Status", "Clients Per Type", "Users Per Type" };

    string[] statuses = new string[0];
    int[] statusData = new int[0];
    string StatusJson;
    string[] types = new string[0];
    int[] typeData = new int[0];
    string TypeJson;
    string[] users = new string[0];
    int[] userData = new int[0];
    string UserJson;

    List<CPS> MostRecentCPSDate;
    string mostRecentCPSDate;
    List<CPSStatus> MostRecentCPSData;

    List<CPT> MostRecentCPTDate;
    string mostRecentCPTDate;
    List<CPTType> MostRecentCPTData;

    List<UPT> MostRecentUPTDate;
    string mostRecentUPTDate;
    List<UPTType> MostRecentUPTData;

    protected override async Task OnInitializedAsync()
    {
        //Clients Per Status
        MostRecentCPSDate = await cpsManager.getMostRecentDate();
        mostRecentCPSDate = MostRecentCPSDate.ElementAt(0).DateOfReport;
        MostRecentCPSData = await cpsManager.getMostRecentStatusCounts(mostRecentCPSDate);

        //Clients Per Type
        MostRecentCPTDate = await cptManager.getMostRecentDate();
        mostRecentCPTDate = MostRecentCPTDate.ElementAt(0).DateOfReport;
        MostRecentCPTData = await cptManager.getMostRecentStatusCounts(mostRecentCPTDate);

        //Users Per Type
        MostRecentUPTDate = await uptManager.getMostRecentDate();
        mostRecentUPTDate = MostRecentUPTDate.ElementAt(0).DateOfReport;
        MostRecentUPTData = await uptManager.getMostRecentTypeCounts(mostRecentUPTDate);

        generatePiGraphs();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<bool>("generatePiChart", StatusJson);
        await JSRuntime.InvokeAsync<bool>("generatePiChart", TypeJson);
        await JSRuntime.InvokeAsync<bool>("generatePiChart", UserJson);
    }

    public class GraphData
    {
        public string EntityName;
        public string[] AllEntityNames { get; set; }
        public int[] AllEntityCountsPerName { get; set; }

        public GraphData(string EntityName, string[] AllEntityNames, int[] AllEntityCountsPerName)
        {
            this.EntityName = EntityName;
            this.AllEntityNames = AllEntityNames;
            this.AllEntityCountsPerName = AllEntityCountsPerName;
        }
    }

    protected void generatePiGraphs()
    {
        //Clients Per Status
        foreach (var cps in MostRecentCPSData)
        {
            Array.Resize(ref statuses, statuses.Length + 1);
            statuses[statuses.GetUpperBound(0)] = cps.StatusName.ToString();
            Array.Resize(ref statusData, statusData.Length + 1);
            statusData[statusData.GetUpperBound(0)] = cps.StatusCountAsOfDate;
        }
        GraphData ClientsPerStatusData = new GraphData("Clients Per Status", statuses, statusData);
        StatusJson = Newtonsoft.Json.JsonConvert.SerializeObject(ClientsPerStatusData);

        //Clients Per Type
        foreach (var cpt in MostRecentCPTData)
        {
            Array.Resize(ref types, types.Length + 1);
            types[types.GetUpperBound(0)] = cpt.TypeName.ToString();
            Array.Resize(ref typeData, typeData.Length + 1);
            typeData[typeData.GetUpperBound(0)] = cpt.TypeCountAsOfDate;
        }
        GraphData ClientsPerTypeData = new GraphData("Clients Per Type", types, typeData);
        TypeJson = Newtonsoft.Json.JsonConvert.SerializeObject(ClientsPerTypeData);

        //Users Per Type
        foreach (var upt in MostRecentUPTData)
        {
            Array.Resize(ref users, users.Length + 1);
            users[users.GetUpperBound(0)] = upt.UserTypeName.ToString();
            Array.Resize(ref userData, userData.Length + 1);
            userData[userData.GetUpperBound(0)] = upt.UserTypeCountAsOfDate;
        }
        GraphData UsersPerTypeData = new GraphData("Users Per Type", users, userData);
        UserJson = Newtonsoft.Json.JsonConvert.SerializeObject(UsersPerTypeData);
    }
}