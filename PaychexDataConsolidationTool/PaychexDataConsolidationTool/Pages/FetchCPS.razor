@page "/cpslist"
@inject ICPSManager cpsManager
@inject IJSRuntime JSRuntime
@namespace PaychexDataConsolidationTool
<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }

    .btn-custom {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        border: 2px solid #000;
        margin: 0px 5px 0px 5px;
    }
</style>

<br />

 <div class="form-group row">
        <div class="col-xs-2">
            <label for="StartDate"> Start Date: </label>
            <input type="text" id="StartDate" class="form-control" placeholder="Start Date" @bind="StartDate" @bind:event="oninput">
        </div>
        <div class="col-xs-2">
            <label for="EndDate"> End Date: </label>
            <input type="text" id="EndDate" class="form-control" placeholder="End Date" @bind="EndDate" @bind:event="oninput">
        </div>
        <div class="d-flex flex-column">
            <button type="button" class="btn btn-primary btn-block mt-auto p-3" @onclick="generateCPSGraph"><i class="fa fa-search" ></i></button>
        </div>
    </div>

    <canvas id="lineGraph"></canvas>


@code {
    private string startDate;
    private string StartDate
    {
        get { return startDate; }
        set { startDate = value; }
    }

    private string endDate;
    private string EndDate
    {
        get { return endDate; }
        set { endDate = value; }
    }


    List<CPS> cpsModel;

    string[] dates = new string[0];
    int[] inactives = new int[0];
    int[] actives = new int[0];
    int[] demos = new int[0];
    int[] masters = new int[0];
    int[] suspendeds = new int[0];
    int[] deleteds = new int[0];
    int[] implementations = new int[0];
    protected async Task generateCPSGraph()
    {
        await this.OnSearchAsync();
        var obj = new
        {
            dates = dates,
            inactives = inactives,
            actives = actives,
            demos = demos,
            masters = masters,
            suspendeds = suspendeds,
            deleteds = deleteds,
            implementations = implementations
        };

        await JSRuntime.InvokeAsync<bool>("generateCPSGraph", obj);
    }

    protected async Task OnSearchAsync()
    {
        Array.Resize(ref dates, 0);
        Array.Resize(ref inactives, 0);
        Array.Resize(ref actives, 0);
        Array.Resize(ref demos, 0);
        Array.Resize(ref masters, 0);
        Array.Resize(ref suspendeds, 0);
        Array.Resize(ref deleteds, 0);
        Array.Resize(ref implementations, 0);
        List<CPS> dateRange = await cpsManager.getDates(startDate, endDate);
        foreach (var date in dateRange)
        {
            Array.Resize(ref dates, dates.Length + 1);
            dates[dates.GetUpperBound(0)] = date.Date;
        }
        List<CPS> Inactives = await cpsManager.getInactives(startDate, endDate);
        foreach (var status in Inactives)
        {
            Array.Resize(ref inactives, inactives.Length + 1);
            inactives[inactives.GetUpperBound(0)] = status.Total;
        }
        List<CPS> Actives = await cpsManager.getActives(startDate, endDate);
        foreach (var status in Actives)
        {
            Array.Resize(ref actives, actives.Length + 1);
            actives[actives.GetUpperBound(0)] = status.Total;
        }

        List<CPS> Demos = await cpsManager.getDemos(startDate, endDate);
        foreach (var status in Demos)
        {
            Array.Resize(ref demos, demos.Length + 1);
            demos[demos.GetUpperBound(0)] = status.Total;
        }

        List<CPS> Masters = await cpsManager.getMasters(startDate, endDate);
        foreach (var status in Masters)
        {
            Array.Resize(ref masters, masters.Length + 1);
            masters[masters.GetUpperBound(0)] = status.Total;
        }

        List<CPS> Suspendeds = await cpsManager.getSuspendeds(startDate, endDate);
        foreach (var status in Suspendeds)
        {
            Array.Resize(ref suspendeds, suspendeds.Length + 1);
            suspendeds[suspendeds.GetUpperBound(0)] = status.Total;
        }

        List<CPS> Deleteds = await cpsManager.getDeleteds(startDate, endDate);
        foreach (var status in Deleteds)
        {
            Array.Resize(ref deleteds, deleteds.Length + 1);
            deleteds[deleteds.GetUpperBound(0)] = status.Total;
        }

        List<CPS> Implementations = await cpsManager.getImplementations(startDate, endDate);
        foreach (var status in Implementations)
        {
            Array.Resize(ref implementations, implementations.Length + 1);
            implementations[implementations.GetUpperBound(0)] = status.Total;
        }
    }
}
